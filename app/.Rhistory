shiny::runApp()
library(shiny)
library(scales)
library(plotly)
library(here)
library(tidyverse)
library(readxl)
runApp()
paste0(wd$data, "/total_sales.xlsx")
wd <- list()
wd$data <- paste0(here::here(),'/Data')
wd$output <- paste0(here::here(), '/Output')
paste0(wd$data, "/total_sales.xlsx")
paste0(here::here(),'/Data')
here
here()
data <- read_xlsx(path = paste0(here(), "/total_sales.xlsx"))
runApp()
shiny::runApp()
library('shiny')
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
data <- read_xlsx(path = paste0(here(), "/total_sales.xlsx"))
library('readxl')
data <- read_xlsx(path = paste0(here(), "/total_sales.xlsx"))
library('here')
data <- read_xlsx(path = "/total_sales.xlsx"))
data <- read_xlsx(path = "/total_sales.xlsx")
shiny::runApp('C:/Users/ringo/Desktop/test_shinyapp/app')
#Import data
data <- read.csv("data.csv", sep=";", dec=",")
runApp('C:/Users/ringo/Desktop/test_shinyapp/app')
library('readxl')
data <- read_xlsx("c/Users/ringo/Desktop/docker_shiny_app/total_sales.xlsx")
data <- read_xlsx("c:/Users/ringo/Desktop/docker_shiny_app/total_sales.xlsx")
data <- read_xlsx("C:/Users/ringo/Desktop/docker_shiny_app/total_sales.xlsx")
data <- read_xlsx("C:/Users/ringo/Desktop/docker_shiny_app/app/total_sales.xlsx")
write.csv(data,"C:/Users/ringo/Desktop/docker_shiny_app/app/total_sales.csv")
runApp()
data <- read.csv(path = "C:/Users/ringo/Desktop/docker_shiny_app/app/total_sales.csv")
data <- read.csv(path = "C:/Users/ringo/Desktop/docker_shiny_app/app/total_sales.csv")
data <- read.csv(file = "C:/Users/ringo/Desktop/docker_shiny_app/app/total_sales.csv")
rm(data)
rm(data_helper)
runApp()
runApp()
runApp()
runApp()
runApp()
rm(data)
runApp()
rm(data)
shiny::runApp()
sales <- data %>%
mutate_each(as.numeric, 8:11) %>%
mutate(Town = as.character(Town))
sales$Month_Yr <- format(as.Date(sales$Date), "%Y-%m")
library(readr)
total_sales <- read_csv("total_sales.csv")
View(total_sales)
sales %>%
filter(Year == 2017) %>%
group_by(Month_Yr) %>%
summarise(Sale.Price = sum(Sale.Price)) %>%
plot_ly(x = ~Month_Yr, y = ~Sale.Price,type = 'bar') %>%
layout(title = list(text = "Sales", font = list(color = "fff")),
xaxis = list(title = "Date", color = "fff"),
yaxis = list(title = "Sales (In Dollars)", color = "fff"),
plot_bgcolor = '#3d3d3d',
paper_bgcolor = '#3d3d3d')
library('shinydashboard')
library('shiny')
library('scales')
library('plotly')
library('magrittr')
library('dplyr')
sales %>%
filter(Year == 2017) %>%
group_by(Month_Yr) %>%
summarise(Sale.Price = sum(Sale.Price)) %>%
plot_ly(x = ~Month_Yr, y = ~Sale.Price,type = 'bar') %>%
layout(title = list(text = "Sales", font = list(color = "fff")),
xaxis = list(title = "Date", color = "fff"),
yaxis = list(title = "Sales (In Dollars)", color = "fff"),
plot_bgcolor = '#3d3d3d',
paper_bgcolor = '#3d3d3d')
sales <- total_sales %>%
mutate_each(as.numeric, 8:11) %>%
mutate(Town = as.character(Town))
sales$Month_Yr <- format(as.Date(sales$Date), "%Y-%m")
sales %>%
filter(Year == 2017) %>%
group_by(Month_Yr) %>%
summarise(Sale.Price = sum(Sale.Price)) %>%
plot_ly(x = ~Month_Yr, y = ~Sale.Price,type = 'bar') %>%
layout(title = list(text = "Sales", font = list(color = "fff")),
xaxis = list(title = "Date", color = "fff"),
yaxis = list(title = "Sales (In Dollars)", color = "fff"),
plot_bgcolor = '#3d3d3d',
paper_bgcolor = '#3d3d3d')
sales %>%
filter(Year == 2017) %>%
group_by(Month_Yr) %>%
summarise(Sale.Price = sum(Sale.Price)) %>%
ggplot(aes(x = Month_Yr, y = Sale.Price),type = 'bar') %>%
'
'
sales %>%
filter(Year == 2017) %>%
group_by(Month_Yr) %>%
summarise(Sale.Price = sum(Sale.Price)) %>%
ggplot(aes(x = Month_Yr, y = Sale.Price)) +
geom_bar(stat = 'identity')
sales %>%
filter(Year == 2017) %>%
group_by(Month_Yr) %>%
summarise(Sale.Price = sum(Sale.Price)) %>%
ggplot(aes(x = Month_Yr, y = Sale.Price)) +
geom_bar(stat = 'identity', color = 'blue')
sales %>%
filter(Year == 2017) %>%
group_by(Month_Yr) %>%
summarise(Sale.Price = sum(Sale.Price)) %>%
ggplot(aes(x = Month_Yr, y = Sale.Price)) +
geom_bar(stat = 'identity', fill = 'blue')
sales %>%
filter(Year == 2017) %>%
group_by(Month_Yr) %>%
summarise(Sale.Price = sum(Sale.Price)) %>%
ggplot(aes(x = Month_Yr, y = Sale.Price)) +
geom_bar(stat = 'identity', fill = 'blue') +
theme_minimal()
library('ggplot2')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sales %>%
##filter(Year == 2018) %>%
group_by(Month_Yr) %>%
summarise(Sale.Price = sum(Sale.Price)) %>%
plot_ly(aes(x = Month_Yr, y = Sale.Price)) +
geom_line()
sales %>%
##filter(Year == 2018) %>%
group_by(Month_Yr) %>%
summarise(Sale.Price = sum(Sale.Price)) %>%
plot_ly(aes(x = Month_Yr, y = Sale.Price)) +
geom_line()
sales %>%
##filter(Year == 2018) %>%
group_by(Month_Yr) %>%
summarise(Sale.Price = sum(Sale.Price)) %>%
ggplot(aes(x = Month_Yr, y = Sale.Price)) +
geom_line()
sales %>%
##filter(Year == 2018) %>%
group_by(Month_Yr) %>%
summarise(Sale.Price = sum(Sale.Price)) %>%
ggplot(aes(x = Month_Yr, y = Sale.Price, group = 1)) +
geom_line()
sales %>%
##filter(Year == 2018) %>%
group_by(Month_Yr) %>%
summarise(Sale.Price = sum(Sale.Price)) %>%
ggplot(aes(x = Month_Yr, y = Sale.Price, group = 1)) +
geom_smooth()
sales %>%
##filter(Year == 2018) %>%
group_by(Month_Yr) %>%
summarise(Sale.Price = sum(Sale.Price)) %>%
ggplot(aes(x = Month_Yr, y = Sale.Price, group = 1)) +
geom_line()
runApp()
sales %>%
##filter(Year == 2018) %>%
group_by(Month_Yr) %>%
summarise(Sale.Price = sum(Sale.Price)) %>%
ggplot(aes(x = Month_Yr, y = Sale.Price, group = 1)) +
geom_line() +
theme_minimal()
runApp()
sales %>%
mutate(transaction = 1) %>%
filter(Zip != 11944) %>% ##this zip presented extreme outliers with minimal zip codes
group_by(Zip) %>%
summarise(total_profit = sum(Gross.Profit),
total_transactions = sum(transaction)) %>%
filter(total_transactions >= 5) %>%
mutate(gross_per_transaction = total_profit/total_transactions) %>%
arrange(desc(gross_per_transaction)) %>%
top_n(5,gross_per_transaction)%>%
mutate(zip = as.character(Zip)) %>%
ggplot(aes(x = zip, y = gross_per_transaction, fill = zip)) +
geom_bar()
sales %>%
mutate(transaction = 1) %>%
filter(Zip != 11944) %>% ##this zip presented extreme outliers with minimal zip codes
group_by(Zip) %>%
summarise(total_profit = sum(Gross.Profit),
total_transactions = sum(transaction)) %>%
filter(total_transactions >= 5) %>%
mutate(gross_per_transaction = total_profit/total_transactions) %>%
arrange(desc(gross_per_transaction)) %>%
top_n(5,gross_per_transaction)%>%
mutate(zip = as.character(Zip)) %>%
ggplot(aes(x = zip, y = gross_per_transaction, fill = zip)) +
geom_bar(stat = 'identity')
runApp()
sales %>%
mutate(transaction = 1) %>%
group_by(Town) %>%
summarise(total_profit = sum(Gross.Profit),
total_transactions = sum(transaction)) %>%
filter(total_transactions >= 10) %>%
mutate(gross_per_transaction = total_profit/total_transactions) %>%
arrange(desc(gross_per_transaction)) %>%
top_n(5,gross_per_transaction) %>%
ggplot(aes(x = Town, y = gross_per_transaction, fille = Town)) + , type = 'bar', color = ~Town, showlegend = FALSE) %>%
layout(title = list(text = "Gross Profit per Transaction", font = list(color = "fff")),
xaxis = list(title = "Town", color = "fff"),
yaxis = list(title = "Gross Dollars (per Trans.)", color = "fff"),
plot_bgcolor = '#3d3d3d',
paper_bgcolor = '#3d3d3d')
runApp()
sales %>%
mutate(transaction = 1) %>%
group_by(Town) %>%
summarise(total_profit = sum(Gross.Profit),
total_transactions = sum(transaction)) %>%
filter(total_transactions >= 10) %>%
mutate(gross_per_transaction = total_profit/total_transactions) %>%
arrange(desc(gross_per_transaction)) %>%
top_n(5,gross_per_transaction) %>%
ggplot(aes(x = Town, y = gross_per_transaction, fill = Town)) +
geom_bar(stat = 'identity')
